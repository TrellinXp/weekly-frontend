{"version":3,"sources":["components/Mplus.js","components/Raids.js","components/Reset.js","App.js","reportWebVitals.js","index.js"],"names":["Mplus","useState","data","setData","weeklyApi","handleClick","e","mpluskey","CompletionDate","Date","now","Completed","postData","url","a","jsonString","JSON","stringify","axios","post","headers","then","res","console","log","catch","err","getBackgroundColor","useEffect","fetch","response","json","className","map","id","Counter","value","style","backgroundColor","onClick","Raids","props","raidsApi","difficulty","raid","error","Reset","reset","buttons","document","getElementsByTagName","i","length","resetButtonColors","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.90034d26.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Mplus.css';\r\nimport axios from 'axios';\r\n\r\nexport default function Mplus() {\r\n    const [data, setData] = useState([]);\r\n    const weeklyApi = 'http://localhost:4000/api/weekly';\r\n\r\n    useEffect(() => {\r\n        fetch(weeklyApi)\r\n            .then(response => response.json())\r\n            .then(data => setData(data));\r\n    });\r\n\r\n    function handleClick(e, mpluskey) {\r\n        mpluskey.CompletionDate = Date.now();\r\n        mpluskey.Completed = 1;\r\n        const response = postData(weeklyApi, mpluskey)\r\n        return response;\r\n    }\r\n\r\n    async function postData(url, data) {\r\n        data.Completed = 1;\r\n\r\n        var jsonString = JSON.stringify(data);\r\n\r\n        axios.post(url, jsonString, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }\r\n        )\r\n        .then(res => {\r\n            console.log(\"Data updated\")\r\n        })\r\n        .catch((err) => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    function getBackgroundColor(mpluskey) {\r\n        if(mpluskey.Completed === 1) {\r\n            return \"green\";\r\n        }\r\n        else {\r\n            return \"white\";\r\n        }\r\n    }\r\n\r\n    return <div><div><h2>Mythic Plus Keys </h2></div> <div className=\"mpluskeys\">\r\n        {data && data?.map(mpluskey => (\r\n            <button id={mpluskey.Counter} value={mpluskey} style={{backgroundColor: getBackgroundColor(mpluskey)}} className=\"key\" key={mpluskey.Counter} \r\n                onClick={(e) => handleClick(e, mpluskey)}> {mpluskey.Counter}\r\n            </button>\r\n        ))}\r\n    </div>\r\n    </div>\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Raids.css';\r\nimport axios from 'axios';\r\n\r\nexport default function Raids(props) {\r\n    const [data, setData] = useState([]);\r\n    const raidsApi = 'http://localhost:4000/api/raid';\r\n    const raidsApiHC = 'http://localhost:4000/api/raidHC';\r\n    const difficulty = props.difficulty;\r\n\r\n    useEffect(() => {\r\n        if(difficulty === 'HC') {\r\n            fetch(raidsApiHC)\r\n                .then(response => response.json())\r\n                .then(data => setData(data));\r\n        } else {\r\n            fetch(raidsApi)\r\n                .then(response => response.json())\r\n                .then(data => setData(data));\r\n        }\r\n    });\r\n\r\n    function handleClick(e, raid) {\r\n        raid.CompletionDate = Date.now();\r\n        raid.Completed = 1;\r\n        const response = postData(raidsApi, raid)\r\n        return response;\r\n    }\r\n\r\n    async function postData(url, data) {\r\n        data.Completed = 1;\r\n\r\n        var jsonString = JSON.stringify(data);\r\n\r\n        axios.post(url, jsonString, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        }\r\n        )\r\n        .then(() => console.log('Object Update'))\r\n        .catch(err => {\r\n            console.error(err);\r\n        });\r\n    }\r\n\r\n    function getBackgroundColor(raid) {\r\n        if(raid.Completed === 1) {\r\n            return \"green\";\r\n        }\r\n        else {\r\n            return \"white\";\r\n        }\r\n    }\r\n\r\n    return <div><div><h2>Raid Bosses {difficulty}</h2></div> <div className=\"mpluskeys\">\r\n        {data && data?.map(raid => (\r\n            <button id={'raid'+difficulty+raid.Counter} value={raid} className=\"raid\"  style={{backgroundColor: getBackgroundColor(raid)}}  key={raid.Counter} onClick={(e) => handleClick(e, raid)}>\r\n                {raid.Counter}\r\n            </button>\r\n        ))}\r\n    </div>\r\n    </div>\r\n}\r\n","import React, { useEffect} from 'react';\r\nimport axios from 'axios';\r\nimport './Reset.css';\r\n\r\nexport default function Reset() {\r\n    const resetApi = 'http://localhost:4000/api/reset';\r\n\r\n    useEffect(() => {\r\n\r\n    });\r\n\r\n    function reset(e) {\r\n        resetButtonColors();\r\n        axios\r\n        .post(resetApi, {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          }\r\n        }\r\n        )\r\n        .then(() => console.log(\"Reset Successfull\"))\r\n        .catch(err => {\r\n          console.error(err);\r\n        });\r\n    }\r\n\r\n    function resetButtonColors() {\r\n        var buttons = document.getElementsByTagName('button');\r\n        for (let i = 0; i < buttons.length; i++) {\r\n            let button = buttons[i];\r\n            button.style.backgroundColor = \"white\";\r\n        }\r\n    }\r\n\r\n    return <div className=\"reset\">\r\n            <h2>Weekly Reset</h2>\r\n            <button className=\"button\" onClick={(e) => reset(e)}> \r\n                Weekly Reset\r\n            </button>\r\n    </div>\r\n}\r\n","import './App.css';\nimport Mplus from './components/Mplus'\nimport Raids from './components/Raids';\nimport Reset from './components/Reset';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Weekly WoW</h1> \n      <div className=\"App\">\n        <Mplus></Mplus>\n        <Raids difficulty=\"NHC\"></Raids>\n        <Raids difficulty=\"HC\"></Raids>\n        <Reset></Reset>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}